<?php
namespace app\classes;

use app\service\ActionlogService;
use app\service\MessageService;
use Yii;
use yii\web\Controller;
use yii\base\Exception;
use linslin\yii2\curl\Curl;
use yii\web\Cookie;
use yii\web\Response;

class BaseController extends Controller {
    protected $requestCookie;
    protected $responseCookie;
    protected $data = [
        'user_id' => 0,
        'role'    => 0,
        'name'    => '',
        'photo'   => '',
        'notice' => []
    ];
    protected $method;
    protected $defineMethod = 'GET';
    protected $params;
    protected $defineParams;
    protected $beginTime;
    protected $err;

    const OPOK = 1; //操作成功
    const OPFAIL = 0; //操作失败
    const LOGADD = '新增';
    const LOGMOD = '修改';
    const LOGDEL = '删除';

    public function init() {
        parent::init();
        $this->requestCookie = Yii::$app->request->cookies;
        $this->responseCookie = Yii::$app->response->cookies;
        date_default_timezone_set('PRC');
        $this->initParams();
        $this->initLog();
    }

    protected function initParams() {
        if (isset($_SERVER['REQUEST_METHOD'])) {
            $this->method = $_SERVER['REQUEST_METHOD'];
        }

        switch ($this->method) {
            case 'POST':
                $this->params = Yii::$app->request->post();
                break;
            case 'GET':
                $this->params = Yii::$app->request->get();
                break;
            default:
                $this->params = [];
        }
    }

    // 初始化日志打印
    protected function initLog() {
        global $logDir;
        Log::init(APP_PROJECT_NAME, $logDir);
        Log::addLogNode("ip",       Yii::$app->request->userIP);
        Log::addLogNode("ua",       $this->__server_get_data('HTTP_USER_AGENT'));
        Log::addLogNode("refer",    $this->__server_get_data('HTTP_REFERER'));
        Log::addLogNode("method",  $this->__server_get_data('REQUEST_METHOD') .":". $this->__server_get_data('SERVER_PROTOCOL'));
        Log::addLogNode("uri",      $this->__server_get_data('REQUEST_URI'));
        Log::addLogNode("rtime",    $this->__server_get_data('REQUEST_TIME_FLOAT')/1000);
        Log::addLogNode("params",    json_encode($this->params));
    }

    /**
     * 在action 执行之前的准备工作
     * @param $action
     * @return bool|void
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action) {
        $this->beginTime = microtime(true);
        session_start();

        $url = Yii::$app->request->getPathInfo();
        if ($url == 'page/user/login' || $url == 'api/user/login' || $url == 'api/wx/reply'
            || $url == 'api/customer/status') {
            return parent::beforeAction( $action );
        }

        // 检测用户是否登录
        if (isset($_SESSION['is_login']) && $_SESSION['is_login'] === true) {
            $this->data['user_id'] = $_SESSION['user_id'];
            $this->data['name'] = $_SESSION['name'];
            $this->data['role'] = $_SESSION['role'];
        }else {
            $this->redirectToSso();
            return;
        }
        //处理photo
        $this->data['photo'] = ".jpg.29x29.jpg";
        $message = new MessageService();
        $this->data['notice'] = $message->unReadMessage($_SESSION['user_id']);
        return parent::beforeAction( $action );
    }

    public function afterAction($action, $result)
    {
        //记录日志
        Log::notice('');
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    /**
     * 重定向到登陆页面
     */
    protected function redirectToSso() {
        Yii::$app->response->redirect('/page/user/login', 302 )->send();
    }

    /**
     * json输出统一出口
     * @param $data
     * @param $error
     * @param int $statusCode
     * @return array
     */
    public function outputJson($data, $error, $statusCode = 200) {
        $ret = array(
            'error' => $error,
            'data'  => $data,
        );
        if (empty($statusCode)) {
            $statusCode = 200;
        }
        Yii::$app->response->statusCode = $statusCode;
        Yii::$app->response->format = Response::FORMAT_JSON;
        return $ret;
    }

    /**
     * 系统操作日志
     * @param $optype
     * @param $opresult
     * @param $oplog
     * @return bool
     * @throws Exception
     */
    protected function actionLog($optype, $opresult, $oplog ) {
        $username = $this->data['name'];
        $ip = Yii::$app->request->userIP;
        $url = Yii::$app->request->url;
        $nowtime = date('Y-m-d H:i:s');
        $oplogstr = ( is_array($oplog) ? json_encode($oplog) : $oplog);
        if ( $opresult != self::OPOK && $opresult != self::OPFAIL) {
            throw new Exception("write action log ,unknown opresult!");
        }
        if ( $optype != self::LOGADD && $optype != self::LOGMOD && $optype != self::LOGDEL ) {
            throw new Exception("write action log, unknown op type!");
        }
        $opservice = Yii::$app->controller->id.'-'.Yii::$app->controller->action->id;
        $end = microtime(true);
        $exectime = $end - $this->beginTime;

        return ActionlogService::WriteLog( $username, $ip,$url,$nowtime,$opservice,$optype,$opresult,$exectime,$oplogstr);
    }

    /**
     * 获取参数值
     * @param $strKey
     * @param null $default
     * @return null
     */
    public function getParam($strKey, $default=null) {
        if (isset($this->params[$strKey])) {
            //todo 过滤参数值
            return $this->params[$strKey];
        }
        return $default;
    }

    /**
     * 请求参数校验
     * @return bool
     */
    protected function check()
    {
        // 请求方法校验
        if ($this->method != $this->defineMethod) {
            $msg = 'req method should be '.$this->defineMethod;
            $this->err = ErrorDict::getError(ErrorDict::G_METHOD, $msg, '');
            return false;
        }

        // 请求参数校验
        if (empty($this->params)) {
            return true;
        }

        foreach ($this->defineParams as $name => $conf) {
            $value = $this->getParam($name);
            if ($conf['require'] == true && (!isset($value) || $value === '')) {
                $this->err = ErrorDict::getError(ErrorDict::G_PARAM, $name.'必填参数为null', '必选项未填');
                return false;
            }
            if ($conf['require'] == false && empty($value)) {
                continue ;
            }
            if ('noCheck' == $conf['checker']) {
                continue;
            }
            $extra = isset($conf['extra']) ? $conf['extra'] : '';
            call_user_func_array('app\\classes\\Checker::'.$conf['checker'], array($name, $value, $extra));
            if (false === Checker::getRet()) {
                $this->err = Checker::getError();
                return false;
            }
            $this->params[$name] = $value;
        }
        return true;
    }

    /**
     * 获取 $_SERVER 数组中数据
     * @param string $key
     * @return string
     */
    function __server_get_data($key = ""){
        if($key == ""){
            return $_SERVER;
        }
        if(! isset( $_SERVER[$key] )){
            return "";
        }
        return $_SERVER[$key];
    }
} 
